{"data":{"edges":[],"nodes":[{"data":{"type":"S3PDFRetrieverComponent","node":{"template":{"_type":"Component","access_key":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"access_key","display_name":"Access Key","advanced":false,"input_types":["Message"],"dynamic":false,"info":"Enter your AWS Access Key","title_case":false,"type":"str","_input_type":"MessageTextInput"},"bucket":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":true,"placeholder":"","show":true,"value":"jauneettestload","name":"bucket","display_name":"Bucket Name","advanced":false,"input_types":["Message"],"dynamic":false,"info":"Enter bucket name","title_case":false,"type":"str","_input_type":"MessageTextInput"},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from typing import List\nfrom langflow.custom import Component\nfrom langflow.io import MessageTextInput, IntInput, BoolInput, SecretStrInput\nfrom langflow.schema import Data\nfrom langflow.template import Output\nimport boto3\nimport io\nfrom PyPDF2 import PdfReader\nfrom concurrent.futures import ThreadPoolExecutor\n\n\nclass S3PDFRetrieverComponent(Component):\n    display_name = \"S3 PDF Retriever\"\n    description = \"Recursively load PDF files from an S3 bucket and extract their text.\"\n    icon = \"folder\"\n    name = \"S3PDFRetrieverComponent\"\n    \n    inputs = [\n        MessageTextInput(name=\"access_key\", display_name=\"Access Key\", info=\"Enter your AWS Access Key\", required=False),\n        SecretStrInput(name=\"secret_key\", display_name=\"Secret Key\", info=\"Enter your AWS Secret Key\", required=False),\n        MessageTextInput(name=\"region_name\", display_name=\"AWS Region\", info=\"Enter AWS region\", required=True),\n        MessageTextInput(name=\"bucket\", display_name=\"Bucket Name\", info=\"Enter bucket name\", required=True),\n        MessageTextInput(name=\"credentials_profile_name\", display_name=\"Credentials Profile Name\", info=\"Enter your AWS credentials profile name\", required=False),\n        MessageTextInput(name=\"types\", display_name=\"Types\", info=\"File types to load (default: pdf).\", is_list=True),\n        IntInput(name=\"max_concurrency\", display_name=\"Max Concurrency\", advanced=True, info=\"Maximum concurrency for loading files.\", value=2),\n        BoolInput(name=\"load_hidden\", display_name=\"Load Hidden\", advanced=True, info=\"If true, hidden files will be loaded.\", value=False),\n        BoolInput(name=\"recursive\", display_name=\"Recursive\", advanced=True, info=\"If true, the search will be recursive.\", value=True),\n    ]\n\n    outputs = [\n        Output(display_name=\"Data\", name=\"data\", method=\"retrieve_files_from_s3\"),\n    ]\n\n    def retrieve_files_from_s3(self) -> List[Data]:\n        s3_client = self.get_s3_client()\n        types = self.types or [\"pdf\"]  # Default to PDF files\n        max_concurrency = self.max_concurrency\n\n        # List all files in the bucket\n        file_list = self.list_files_in_s3_bucket(s3_client, types)\n\n        if not file_list:\n            return []\n\n        # Process files with multithreading\n        if max_concurrency > 1:\n            with ThreadPoolExecutor(max_workers=max_concurrency) as executor:\n                loaded_data = list(executor.map(lambda file_key: self.process_file_from_s3(s3_client, file_key), file_list))\n        else:\n            loaded_data = [self.process_file_from_s3(s3_client, file_key) for file_key in file_list]\n\n        loaded_data = list(filter(None, loaded_data))  # Remove None values\n        self.status = loaded_data\n        return loaded_data\n\n    def get_s3_client(self):\n        \"\"\"\n        Create and return an S3 client using either:\n        1. Access and Secret Key (if provided),\n        2. Credentials profile name (if provided),\n        or raise an error if neither is provided.\n        \"\"\"\n        if self.access_key and self.secret_key:\n            # Use access_key and secret_key if provided\n            s3_client = boto3.client(\n                's3',\n                aws_access_key_id=self.access_key,\n                aws_secret_access_key=self.secret_key,\n                region_name=self.region_name\n            )\n        elif self.credentials_profile_name:\n            # Use AWS credentials profile if provided\n            session = boto3.Session(profile_name=self.credentials_profile_name)\n            s3_client = session.client('s3', region_name=self.region_name)\n        else:\n            raise ValueError(\"Either AWS access/secret keys or a credentials profile name must be provided.\")\n        \n        return s3_client\n\n    def list_files_in_s3_bucket(self, s3_client, types):\n        \"\"\"\n        List all files in the specified S3 bucket that match the given types.\n        \"\"\"\n        response = s3_client.list_objects_v2(Bucket=self.bucket)\n        if 'Contents' not in response:\n            return []\n\n        # Filter and return only matching file types\n        return [item['Key'] for item in response['Contents'] if any(item['Key'].lower().endswith(f\".{ext}\") for ext in types)]\n\n    def process_file_from_s3(self, s3_client, file_key):\n        \"\"\"\n        Download a file from S3 and extract its content (text for PDF files).\n        \"\"\"\n        try:\n            response = s3_client.get_object(Bucket=self.bucket, Key=file_key)\n            file_data = response['Body'].read()\n\n            # If it's a PDF, extract text\n            if file_key.lower().endswith(\".pdf\"):\n                text = self.extract_pdf_text(io.BytesIO(file_data))\n                return Data(data={\"file_name\": file_key, \"content\": text})\n\n        except Exception as e:\n            print(f\"Error processing file {file_key}: {e}\")\n            return None\n\n    def extract_pdf_text(self, pdf_file):\n        \"\"\"\n        Extracts text from a PDF file.\n        \"\"\"\n        reader = PdfReader(pdf_file)\n        text = \"\"\n        for page in reader.pages:\n            extracted_text = page.extract_text()\n            if extracted_text:\n                text += extracted_text\n        return text if text else \"No text found in the PDF.\"","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"credentials_profile_name":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"357576205424_FIELDOPS_FOPS-DEL","name":"credentials_profile_name","display_name":"Credentials Profile Name","advanced":false,"input_types":["Message"],"dynamic":false,"info":"Enter your AWS credentials profile name","title_case":false,"type":"str","_input_type":"MessageTextInput"},"load_hidden":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":false,"name":"load_hidden","display_name":"Load Hidden","advanced":true,"dynamic":false,"info":"If true, hidden files will be loaded.","title_case":false,"type":"bool","_input_type":"BoolInput"},"max_concurrency":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":2,"name":"max_concurrency","display_name":"Max Concurrency","advanced":true,"dynamic":false,"info":"Maximum concurrency for loading files.","title_case":false,"type":"int","_input_type":"IntInput"},"recursive":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":true,"name":"recursive","display_name":"Recursive","advanced":true,"dynamic":false,"info":"If true, the search will be recursive.","title_case":false,"type":"bool","_input_type":"BoolInput"},"region_name":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":true,"placeholder":"","show":true,"value":"us-east-1","name":"region_name","display_name":"AWS Region","advanced":false,"input_types":["Message"],"dynamic":false,"info":"Enter AWS region","title_case":false,"type":"str","_input_type":"MessageTextInput"},"secret_key":{"load_from_db":false,"required":false,"placeholder":"","show":true,"value":"OYXUTizoPpA1eWsSZLNInGg0mUAtSNLlIPzkS4iQ","name":"secret_key","display_name":"Secret Key","advanced":false,"input_types":["Message"],"dynamic":false,"info":"Enter your AWS Secret Key","title_case":false,"password":true,"type":"str","_input_type":"SecretStrInput"},"types":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":true,"required":false,"placeholder":"","show":true,"value":"","name":"types","display_name":"Types","advanced":false,"input_types":["Message"],"dynamic":false,"info":"File types to load (default: pdf).","title_case":false,"type":"str","_input_type":"MessageTextInput"}},"description":"Recursively load PDF files from an S3 bucket and extract their text.","icon":"folder","base_classes":["Data"],"display_name":"Loading Data from Bucket","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Data"],"selected":"Data","name":"data","display_name":"Data","method":"retrieve_files_from_s3","value":"__UNDEFINED__","cache":true}],"field_order":["access_key","secret_key","region_name","bucket","credentials_profile_name","types","max_concurrency","load_hidden","recursive"],"beta":false,"edited":true,"lf_version":"1.0.14.post1","official":false},"id":"S3PDFRetrieverComponent-Bn3XN"},"id":"S3PDFRetrieverComponent-Bn3XN","position":{"x":0,"y":0},"type":"genericNode"}],"viewport":{"x":1,"y":1,"zoom":1}},"description":"Recursively load PDF files from an S3 bucket and extract their text.","name":"Loading Data from Bucket","id":"S3PDFRetrieverComponent-Bn3XN","is_component":true,"last_tested_version":"1.0.14.post1"}