{"data":{"edges":[],"nodes":[{"data":{"type":"CustomComponent","node":{"template":{"_type":"Component","embedding":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"embedding","display_name":"Embedding","advanced":false,"input_types":["Embeddings"],"dynamic":false,"info":"","title_case":false,"type":"other","_input_type":"HandleInput"},"pdf_path":{"trace_as_metadata":true,"file_path":"","fileTypes":["pdf"],"list":false,"required":true,"placeholder":"","show":true,"value":"","name":"pdf_path","display_name":"PDF Path","advanced":false,"dynamic":false,"info":"Supported file types: pdf","title_case":false,"type":"file","_input_type":"FileInput","load_from_db":false},"ASTRA_DB_APPLICATION_TOKEN":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":true,"placeholder":"","show":true,"value":"","name":"ASTRA_DB_APPLICATION_TOKEN","display_name":"ASTRA_DB_APPLICATION_TOKEN","advanced":false,"input_types":["Message"],"dynamic":false,"info":"ASTRA_DB_APPLICATION_TOKEN","title_case":false,"type":"str","_input_type":"MessageTextInput"},"ASTRA_DB_DATABASE_ID":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":true,"placeholder":"","show":true,"value":"","name":"ASTRA_DB_DATABASE_ID","display_name":"ASTRA_DB_DATABASE_ID","advanced":false,"input_types":["Message"],"dynamic":false,"info":"Enter the ASTRA_DB_DATABASE_ID","title_case":false,"type":"str","_input_type":"MessageTextInput"},"ASTRA_DB_KEYSPACE":{"load_from_db":true,"required":true,"placeholder":"","show":true,"value":"","name":"ASTRA_DB_KEYSPACE","display_name":"ASTRA_DB_KEYSPACE","advanced":false,"input_types":["Message"],"dynamic":false,"info":"ASTRA_DB_KEYSPACE","title_case":false,"password":true,"type":"str","_input_type":"SecretStrInput"},"access_key":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"access_key","display_name":"Access Key","advanced":false,"input_types":["Message"],"dynamic":false,"info":"Enter your AWS Access Key","title_case":false,"type":"str","_input_type":"MessageTextInput"},"bucket":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":true,"placeholder":"","show":true,"value":"jauneettestload","name":"bucket","display_name":"Bucket Name","advanced":false,"input_types":["Message"],"dynamic":false,"info":"Enter bucket name","title_case":false,"type":"str","_input_type":"MessageTextInput"},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from typing import Optional\nfrom langflow.custom import Component\nfrom langflow.io import HandleInput, MessageTextInput, Output, SecretStrInput, FileInput, SecretStrInput\nfrom loguru import logger\nfrom langflow.schema import Data\nfrom langchain_community.graph_vectorstores import CassandraGraphVectorStore\n#from langchain_openai import OpenAIEmbeddings  # Hypothetical import for Astra embeddings\nfrom PyPDF2 import PdfReader\nfrom langchain_community.graph_vectorstores.extractors import LinkExtractorTransformer, KeybertLinkExtractor\nfrom langchain_community.document_loaders import PyPDFLoader\nimport os\nimport boto3\nimport base64\nimport requests\nimport cassio\nclass CustomComponent(Component):\n    display_name = \"PDF to Knowledge Graph Transformer with Flexible Embedding\"\n    description = \"Processes a PDF, transforms it into nodes and edges, and stores it in a Cassandra-based knowledge graph using the Graph Vector Store.\"\n    documentation: str = \"http://docs.langflow.org/components/custom\"\n    icon = \"custom_components\"\n    name = \"CustomComponent\"\n    PDF_FILE_TYPES = [\"pdf\"]\n\n    inputs = [\n        MessageTextInput(name=\"access_key\", display_name=\"Access Key\", info=\"Enter your AWS Access Key\", required=False),\n        MessageTextInput(name=\"region_name\", display_name=\"AWS Region\", info=\"Enter AWS region\", required=True),\n        MessageTextInput(name=\"bucket\", display_name=\"Bucket Name\", info=\"Enter bucket name\", required=True),\n        SecretStrInput(name=\"secret_key\", display_name=\"Secret Key\", info=\"Enter your AWS Secret Key\", required=False),\n        MessageTextInput(name=\"credentials_profile_name\", display_name=\"Credentials Profile Name\", info=\"Enter your credentials profile name\", required=False),\n        # Three new input variables for initializing cassio vector store\n        MessageTextInput(name=\"ASTRA_DB_DATABASE_ID\", display_name=\"ASTRA_DB_DATABASE_ID\", info=\"Enter the ASTRA_DB_DATABASE_ID\", required=True),\n        MessageTextInput(name=\"ASTRA_DB_APPLICATION_TOKEN\", display_name=\"ASTRA_DB_APPLICATION_TOKEN\", info=\"ASTRA_DB_APPLICATION_TOKEN\", required=True),\n        SecretStrInput(name=\"ASTRA_DB_KEYSPACE\", display_name=\"ASTRA_DB_KEYSPACE\", info=\"ASTRA_DB_KEYSPACE\", required=True),\n        FileInput(\n            name=\"pdf_path\",\n            display_name=\"PDF Path\",\n            file_types=PDF_FILE_TYPES,\n            info=f\"Supported file types: {', '.join(PDF_FILE_TYPES)}\",\n            required=True\n        ),\n        HandleInput(name=\"embedding\", display_name=\"Embedding\", input_types=[\"Embeddings\"])\n    ]\n\n    outputs = [\n        Output(display_name=\"Graph Output\", name=\"graph_output\", method=\"build_output\"),\n    ]\n\n    def build_output(self) -> dict:\n        s3_client = self.get_s3_client()\n    \n   \n\n    # Proceed with the rest of the process after checking embedding\n        try:\n            s3_url, pdf_name = self.upload_pdf_to_s3(s3_client)\n        \n        # Process the PDF to extract nodes and edges, and store in graph\n            self.process_and_store_pdf_to_graph()\n\n        # Return the graph structure as part of the output\n            data = {\n                \"pdf_name\": pdf_name,\n                \"s3_url\": s3_url,\n                \"status\": \"success\",\n            }\n        \n            return data\n\n        except Exception as e:\n            print(f\"Error processing PDF: {e}\")\n            return {\n                \"status\": \"error\",\n                \"message\": str(e)\n            }\n\n    def get_s3_client(self):\n        # Check if access_key and secret_key are provided\n        if self.access_key and self.secret_key:\n            # Use access_key and secret_key if provided\n            s3_client = boto3.client(\n                's3',\n                aws_access_key_id=self.access_key,\n                aws_secret_access_key=self.secret_key,\n                region_name=self.region_name\n            )\n        elif self.credentials_profile_name:\n            # Use profile credentials if access and secret keys are not provided\n            session = boto3.Session(profile_name=self.credentials_profile_name)\n            s3_client = session.client('s3', region_name=self.region_name)\n        else:\n            raise ValueError(\"Either access/secret keys or a credentials profile name must be provided.\")\n        return s3_client\n\n    def upload_pdf_to_s3(self, s3_client):\n        pdf_name = os.path.basename(self.pdf_path)\n        s3_key = f\"{pdf_name}\"\n\n        # Upload the PDF to S3\n        s3_client.upload_file(self.pdf_path, self.bucket, s3_key)\n\n        # Generate S3 URL\n        s3_url = f\"https://{self.bucket}.s3.amazonaws.com/{s3_key}\"\n        return s3_url, pdf_name\n\n    def process_pdf_to_graph(self, pdf_path):\n        # Initialize the PDF reader\n        pages = PyPDFLoader(pdf_path).load()\n        return pages\n\n    def generate_graph_from_text(self, pages):\n        \"\"\"\n        This function transforms the extracted PDF text into graph nodes and edges.\n        \"\"\"\n        # Example logic: transform pages into a graph structure\n        pipeline = LinkExtractorTransformer([KeybertLinkExtractor()])\n        transformed_documents = pipeline.transform_documents(pages)\n        return transformed_documents\n\n    def store_in_graph(self, pages):\n        \"\"\"\n        Store the extracted pages in the graph using the CassandraGraphVectorStore.\n        \"\"\"\n        # Use the embedding model specified by the user\n        \n        \n        \n        ASTRA_DB_DATABASE_ID = self.ASTRA_DB_DATABASE_ID\n        ASTRA_DB_APPLICATION_TOKEN = self.ASTRA_DB_APPLICATION_TOKEN\n        ASTRA_DB_KEYSPACE = self.ASTRA_DB_KEYSPACE\n        \n        # Initialize Cassio\n        cassio.init(\n            astra_db_database_id=ASTRA_DB_DATABASE_ID,\n            astra_db_application_token=ASTRA_DB_APPLICATION_TOKEN,\n            astra_db_keyspace=ASTRA_DB_KEYSPACE\n        )\n        \n        # Initialize the CassandraGraphVectorStore\n        \n        graph_vector_store = CassandraGraphVectorStore(embeddings=self.embedding)\n        \n        # Store the transformed graph in the knowledge graph\n        graph_vector_store.add_documents(pages)\n\n    def process_and_store_pdf_to_graph(self):\n        \"\"\"\n        Combines the PDF processing and graph storage steps.\n        \"\"\"\n        # Extract pages from the PDF\n     \n        pages = self.process_pdf_to_graph(self.pdf_path)\n        \n        # Generate graph nodes and edges from the extracted pages\n        graph_documents = self.generate_graph_from_text(pages)\n        \n        # Store the generated graph in the Cassandra graph store\n        if graph_documents:\n            self.store_in_graph(graph_documents)\n        else:\n            raise ValueError(\"No graph documents were generated from the PDF.\")","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"credentials_profile_name":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"credentials_profile_name","display_name":"Credentials Profile Name","advanced":false,"input_types":["Message"],"dynamic":false,"info":"Enter your credentials profile name","title_case":false,"type":"str","_input_type":"MessageTextInput"},"region_name":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":true,"placeholder":"","show":true,"value":"us-east-1","name":"region_name","display_name":"AWS Region","advanced":false,"input_types":["Message"],"dynamic":false,"info":"Enter AWS region","title_case":false,"type":"str","_input_type":"MessageTextInput"},"secret_key":{"load_from_db":true,"required":false,"placeholder":"","show":true,"value":"","name":"secret_key","display_name":"Secret Key","advanced":false,"input_types":["Message"],"dynamic":false,"info":"Enter your AWS Secret Key","title_case":false,"password":true,"type":"str","_input_type":"SecretStrInput"}},"description":"Processes a PDF, transforms it into nodes and edges, and stores it in a Cassandra-based knowledge graph using the Graph Vector Store.","icon":"custom_components","base_classes":["dict"],"display_name":"Extract Graph","documentation":"http://docs.langflow.org/components/custom","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["dict"],"selected":"dict","name":"graph_output","display_name":"Graph Output","method":"build_output","value":"__UNDEFINED__","cache":true}],"field_order":["access_key","region_name","bucket","secret_key","credentials_profile_name","ASTRA_DB_DATABASE_ID","ASTRA_DB_APPLICATION_TOKEN","ASTRA_DB_KEYSPACE","pdf_path","embedding"],"beta":false,"edited":true,"official":false},"id":"CustomComponent-MyGWc"},"id":"CustomComponent-MyGWc","position":{"x":0,"y":0},"type":"genericNode"}],"viewport":{"x":1,"y":1,"zoom":1}},"description":"Processes a PDF, transforms it into nodes and edges, and stores it in a Cassandra-based knowledge graph using the Graph Vector Store.","name":"Extract Graph","id":"CustomComponent-MyGWc","is_component":true,"last_tested_version":"1.0.14.post1"}